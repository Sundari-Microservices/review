spring.application.name= review-ms
server.port=8083

#spring.h2.console.enabled = true
## Here we are using test database.
#spring.datasource.url = jdbc:h2:mem:test
#spring.jpa.generate-ddl=true
## to log sql queries generated by hibernate into console.
#spring.jpa.show-sql=true
##Instead of creating and dropping schema everytime, we can update it.
#spring.jpa.hibernate.ddl-auto=update

# PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/review
spring.datasource.username=user
spring.datasource.password=password
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto = update
#  create-drop
#This tells hiberanate which dilect should use.
#dialect is a configuration of SQL generation and it varies from database to database.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Eureka
eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/
# Below property tells, whether you need this application to register to Eureka,
# here we specify it as true bcz we need to register this microservice with Eureka.
eureka.client.register-with-eureka = true
# Below property tells, does this application needs to fetch the information of the registry.
eureka.client.fetch-registry = true

#Zipkin
# We are telling Zipkin to trace each and every request, that goes on.
# In production grade environment, we might not want to trace all requests flowing
#in our system, because it will slow down our application, so we will reduce to 0.6,
#so that it will trace 60% of the request.

management.tracing.sampling.probability = 1.0